<?php
/*
 * Generated by peggy 1.0.0 with phpeggy plugin
 *
 * https://peggyjs.org/
 */

namespace KPS\Peg;

/* Useful functions: */

/* chr_unicode - get unicode character from its char code */
if (!function_exists("KPS\\Peg\\chr_unicode")) {
    function chr_unicode($code) {
        return html_entity_decode("&#$code;", ENT_QUOTES, "UTF-8");
    }
}
/* ord_unicode - get unicode char code from string */
if (!function_exists("KPS\\Peg\\ord_unicode")) {
    function ord_unicode($character) {
        if (strlen($character) === 1) {
            return ord($character);
        }
        $json = json_encode($character);
        $utf16_1 = hexdec(substr($json, 3, 4));
        if (substr($json, 7, 2) === "\u") {
            $utf16_2 = hexdec(substr($json, 9, 4));
            return 0x10000 + (($utf16_1 & 0x3ff) << 10) + ($utf16_2 & 0x3ff);
        } else {
            return $utf16_1;
        }
    }
}
/* peg_regex_test - multibyte regex test */
if (!function_exists("KPS\\Peg\\peg_regex_test")) {
    function peg_regex_test($pattern, $string) {
        if (substr($pattern, -1) == "i") {
            return mb_eregi(substr($pattern, 1, -2), $string);
        } else {
            return mb_ereg(substr($pattern, 1, -1), $string);
        }
    }
}

/* Syntax error exception */
if (!class_exists("KPS\\Peg\\SyntaxError", false)) {
    class SyntaxError extends \Exception {
        public $expected;
        public $found;
        public $grammarOffset;
        public $grammarLine;
        public $grammarColumn;
        public $name;
        public function __construct($message, $expected, $found, $offset, $line, $column) {
            parent::__construct($message, 0);
            $this->expected = $expected;
            $this->found = $found;
            $this->grammarOffset = $offset;
            $this->grammarLine = $line;
            $this->grammarColumn = $column;
            $this->name = "SyntaxError";
        }
    }
}

class TemplateParser {
    private $peg_currPos          = 0;
    private $peg_reportedPos      = 0;
    private $peg_cachedPos        = 0;
    private $peg_cachedPosDetails = array('line' => 1, 'column' => 1, 'seenCR' => false );
    private $peg_maxFailPos       = 0;
    private $peg_maxFailExpected  = array();
    private $peg_silentFails      = 0;
    private $input                = array();
    private $input_length         = 0;

    private function cleanup_state() {
      $this->peg_currPos          = 0;
      $this->peg_reportedPos      = 0;
      $this->peg_cachedPos        = 0;
      $this->peg_cachedPosDetails = array('line' => 1, 'column' => 1, 'seenCR' => false );
      $this->peg_maxFailPos       = 0;
      $this->peg_maxFailExpected  = array();
      $this->peg_silentFails      = 0;
      $this->input                = array();
      $this->input_length         = 0;

    }

    private function input_substr($start, $length) {
      if ($length === 1 && $start < $this->input_length) {
        return $this->input[$start];
      }
      $substr = '';
      $max = min($start + $length, $this->input_length);
      for ($i = $start; $i < $max; $i++) {
        $substr .= $this->input[$i];
      }
      return $substr;
    }


    private function text() {
      return $this->input_substr($this->peg_reportedPos, $this->peg_currPos - $this->peg_reportedPos);
    }

    private function offset() {
      return $this->peg_reportedPos;
    }

    private function line() {
      $compute_pd = $this->peg_computePosDetails($this->peg_reportedPos);
      return $compute_pd["line"];
    }

    private function column() {
      $compute_pd = $this->peg_computePosDetails($this->peg_reportedPos);
      return $compute_pd["column"];
    }

    private function expected($description) {
      throw $this->peg_buildException(
        null,
        array(array("type" => "other", "description" => $description )),
        $this->peg_reportedPos
      );
    }

    private function error($message) {
      throw $this->peg_buildException($message, null, $this->peg_reportedPos);
    }

    private function peg_advancePos(&$details, $startPos, $endPos) {
      for ($p = $startPos; $p < $endPos; $p++) {
        $ch = $this->input_substr($p, 1);
        if ($ch === "\n") {
          if (!$details["seenCR"]) { $details["line"]++; }
          $details["column"] = 1;
          $details["seenCR"] = false;
        } else if ($ch === "\r" || $ch === "\u2028" || $ch === "\u2029") {
          $details["line"]++;
          $details["column"] = 1;
          $details["seenCR"] = true;
        } else {
          $details["column"]++;
          $details["seenCR"] = false;
        }
      }
    }

    private function peg_computePosDetails($pos) {
      if ($this->peg_cachedPos !== $pos) {
        if ($this->peg_cachedPos > $pos) {
          $this->peg_cachedPos = 0;
          $this->peg_cachedPosDetails = array( "line" => 1, "column" => 1, "seenCR" => false );
        }
        $this->peg_advancePos($this->peg_cachedPosDetails, $this->peg_cachedPos, $pos);
        $this->peg_cachedPos = $pos;
      }

      return $this->peg_cachedPosDetails;
    }

    private function peg_fail($expected) {
      if ($this->peg_currPos < $this->peg_maxFailPos) { return; }

      if ($this->peg_currPos > $this->peg_maxFailPos) {
        $this->peg_maxFailPos = $this->peg_currPos;
        $this->peg_maxFailExpected = array();
      }

      $this->peg_maxFailExpected[] = $expected;
    }

    private function peg_buildException_expectedComparator($a, $b) {
      if ($a["description"] < $b["description"]) {
        return -1;
      } else if ($a["description"] > $b["description"]) {
        return 1;
      } else {
        return 0;
      }
    }

    private function peg_buildException($message, $expected, $pos) {
      $posDetails = $this->peg_computePosDetails($pos);
      $found      = $pos < $this->input_length ? $this->input[$pos] : null;

      if ($expected !== null) {
        usort($expected, array($this, "peg_buildException_expectedComparator"));
        $i = 1;
        while ($i < count($expected)) {
          if ($expected[$i - 1] === $expected[$i]) {
            array_splice($expected, $i, 1);
          } else {
            $i++;
          }
        }
      }

      if ($message === null) {
        $expectedDescs = array_fill(0, count($expected), null);

        for ($i = 0; $i < count($expected); $i++) {
          $expectedDescs[$i] = $expected[$i]["description"];
        }

        $expectedDesc = count($expected) > 1
          ? join(", ", array_slice($expectedDescs, 0, -1))
              . " or "
              . $expectedDescs[count($expected) - 1]
          : $expectedDescs[0];

        $foundDesc = $found ? json_encode($found) : "end of input";

        $message = "Expected " . $expectedDesc . " but " . $foundDesc . " found.";
      }

      return new SyntaxError(
        $message,
        $expected,
        $found,
        $pos,
        $posDetails["line"],
        $posDetails["column"]
      );
    }

    private $peg_FAILED;
    private $peg_c0;
    private $peg_c1;
    private $peg_c2;
    private $peg_c3;
    private $peg_c4;
    private $peg_c5;
    private $peg_c6;
    private $peg_c7;
    private $peg_c8;
    private $peg_c9;
    private $peg_c10;
    private $peg_c11;
    private $peg_c12;
    private $peg_c13;
    private $peg_c14;
    private $peg_c15;
    private $peg_c16;
    private $peg_c17;
    private $peg_c18;
    private $peg_c19;
    private $peg_c20;
    private $peg_c21;
    private $peg_c22;
    private $peg_c23;
    private $peg_c24;
    private $peg_c25;
    private $peg_c26;
    private $peg_c27;
    private $peg_c28;
    private $peg_c29;
    private $peg_c30;
    private $peg_c31;
    private $peg_c32;
    private $peg_c33;
    private $peg_c34;
    private $peg_c35;
    private $peg_c36;
    private $peg_c37;
    private $peg_c38;
    private $peg_c39;
    private $peg_c40;
    private $peg_c41;
    private $peg_c42;
    private $peg_c43;
    private $peg_c44;
    private $peg_c45;
    private $peg_c46;
    private $peg_c47;
    private $peg_c48;
    private $peg_c49;
    private $peg_c50;
    private $peg_c51;
    private $peg_c52;
    private $peg_c53;
    private $peg_c54;
    private $peg_c55;
    private $peg_c56;
    private $peg_c57;
    private $peg_c58;
    private $peg_c59;
    private $peg_c60;
    private $peg_c61;
    private $peg_c62;
    private $peg_c63;
    private $peg_c64;
    private $peg_c65;
    private $peg_c66;

    private function peg_f0($f) { return [2, 0, $f]; }
    private function peg_f1($f) { return [2, 1, $f]; }
    private function peg_f2($f) { return [2, 2, $f]; }
    private function peg_f3($v) { return [1, 0, $v]; }
    private function peg_f4($v) { return [1, 1, $v]; }
    private function peg_f5($v) { return [1, 2, $v]; }
    private function peg_f6($h, $t) { return [$h, ...$t]; }
    private function peg_f7($k) { return $k; }
    private function peg_f8($chars) { return implode('', $chars); }
    private function peg_f9($r) { return $r; }
    private function peg_f10($r) { return match($r) {
    			'b' => "\b",
    			'f' => "\f",
    			'n' => "\n",
    			'r' => "\r",
    			't' => "\t",
    		}; }
    private function peg_f11($digits) { return Helper::makeChar($digits, 8); }
    private function peg_f12($digits) { return Helper::makeChar($digits, 16); }
    private function peg_f13($i) { return intval($i); }

    private function peg_parseExp() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseFileExp();
      if ($s1 === $this->peg_FAILED) {
        $s1 = $this->peg_parseValExp();
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_currPos;
        $s3 = array();
        if ($this->input_length > $this->peg_currPos) {
          $s4 = $this->input_substr($this->peg_currPos, 1);
          $this->peg_currPos++;
        } else {
          $s4 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c0);
          }
        }
        while ($s4 !== $this->peg_FAILED) {
          $s3[] = $s4;
          if ($this->input_length > $this->peg_currPos) {
            $s4 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s4 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c0);
            }
          }
        }
        if ($s3 !== $this->peg_FAILED) {
          $s2 = $this->input_substr($s2, $this->peg_currPos - $s2);
        } else {
          $s2 = $s3;
        }
        if ($s2 !== $this->peg_FAILED) {
          $s1 = array($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseFileExp() {

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c1) {
        $s1 = $this->peg_c1;
        $this->peg_currPos += 2;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c2);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseString();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 !== $this->peg_FAILED) {
              if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c3) {
                $s5 = $this->peg_c3;
                $this->peg_currPos += 2;
              } else {
                $s5 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c4);
                }
              }
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f0($s3);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c5) {
          $s1 = $this->peg_c5;
          $this->peg_currPos += 2;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c6);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_parse_();
          if ($s2 !== $this->peg_FAILED) {
            $s3 = $this->peg_parseString();
            if ($s3 !== $this->peg_FAILED) {
              $s4 = $this->peg_parse_();
              if ($s4 !== $this->peg_FAILED) {
                if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c7) {
                  $s5 = $this->peg_c7;
                  $this->peg_currPos += 2;
                } else {
                  $s5 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) {
                      $this->peg_fail($this->peg_c8);
                  }
                }
                if ($s5 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s0;
                  $s1 = $this->peg_f1($s3);
                  $s0 = $s1;
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_currPos;
          if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c9) {
            $s1 = $this->peg_c9;
            $this->peg_currPos += 2;
          } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c10);
            }
          }
          if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_parse_();
            if ($s2 !== $this->peg_FAILED) {
              $s3 = $this->peg_parseString();
              if ($s3 !== $this->peg_FAILED) {
                $s4 = $this->peg_parse_();
                if ($s4 !== $this->peg_FAILED) {
                  if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c11) {
                    $s5 = $this->peg_c11;
                    $this->peg_currPos += 2;
                  } else {
                    $s5 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c12);
                    }
                  }
                  if ($s5 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s1 = $this->peg_f2($s3);
                    $s0 = $s1;
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        }
      }

      return $s0;
    }

    private function peg_parseValExp() {

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c13) {
        $s1 = $this->peg_c13;
        $this->peg_currPos += 2;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c14);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseVal();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 !== $this->peg_FAILED) {
              if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c15) {
                $s5 = $this->peg_c15;
                $this->peg_currPos += 2;
              } else {
                $s5 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c16);
                }
              }
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f3($s3);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c17) {
          $s1 = $this->peg_c17;
          $this->peg_currPos += 2;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c18);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_parse_();
          if ($s2 !== $this->peg_FAILED) {
            $s3 = $this->peg_parseVal();
            if ($s3 !== $this->peg_FAILED) {
              $s4 = $this->peg_parse_();
              if ($s4 !== $this->peg_FAILED) {
                if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c19) {
                  $s5 = $this->peg_c19;
                  $this->peg_currPos += 2;
                } else {
                  $s5 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) {
                      $this->peg_fail($this->peg_c20);
                  }
                }
                if ($s5 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s0;
                  $s1 = $this->peg_f4($s3);
                  $s0 = $s1;
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_currPos;
          if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c21) {
            $s1 = $this->peg_c21;
            $this->peg_currPos += 2;
          } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c22);
            }
          }
          if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_parse_();
            if ($s2 !== $this->peg_FAILED) {
              $s3 = $this->peg_parseVal();
              if ($s3 !== $this->peg_FAILED) {
                $s4 = $this->peg_parse_();
                if ($s4 !== $this->peg_FAILED) {
                  if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c23) {
                    $s5 = $this->peg_c23;
                    $this->peg_currPos += 2;
                  } else {
                    $s5 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c24);
                    }
                  }
                  if ($s5 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s1 = $this->peg_f5($s3);
                    $s0 = $s1;
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        }
      }

      return $s0;
    }

    private function peg_parseVal() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseIden();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_parseArrayKey();
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_parseArrayKey();
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f6($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseArrayKey() {

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c25) {
        $s1 = $this->peg_c25;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c26);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseInt();
          if ($s3 === $this->peg_FAILED) {
            $s3 = $this->peg_parseString();
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 !== $this->peg_FAILED) {
              if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c27) {
                $s5 = $this->peg_c27;
                $this->peg_currPos++;
              } else {
                $s5 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c28);
                }
              }
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f7($s3);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseString() {

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c30) {
        $s1 = $this->peg_c30;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c31);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_parseChar();
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_parseChar();
        }
        if ($s2 !== $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c30) {
            $s3 = $this->peg_c30;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c31);
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f8($s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c29);
        }
      }

      return $s0;
    }

    private function peg_parseChar() {

      if (peg_regex_test($this->peg_c32, $this->input_substr($this->peg_currPos, 1))) {
        $s0 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c33);
        }
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c34) {
          $s1 = $this->peg_c34;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c35);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          if (peg_regex_test($this->peg_c36, $this->input_substr($this->peg_currPos, 1))) {
            $s2 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c37);
            }
          }
          if ($s2 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f9($s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_currPos;
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c34) {
            $s1 = $this->peg_c34;
            $this->peg_currPos++;
          } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c35);
            }
          }
          if ($s1 !== $this->peg_FAILED) {
            if (peg_regex_test($this->peg_c38, $this->input_substr($this->peg_currPos, 1))) {
              $s2 = $this->input_substr($this->peg_currPos, 1);
              $this->peg_currPos++;
            } else {
              $s2 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c39);
              }
            }
            if ($s2 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = $this->peg_f10($s2);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_currPos;
            if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c40) {
              $s1 = $this->peg_c40;
              $this->peg_currPos += 2;
            } else {
              $s1 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c41);
              }
            }
            if ($s1 !== $this->peg_FAILED) {
              $s2 = $this->peg_currPos;
              $s3 = $this->peg_currPos;
              if (peg_regex_test($this->peg_c42, $this->input_substr($this->peg_currPos, 1))) {
                $s4 = $this->input_substr($this->peg_currPos, 1);
                $this->peg_currPos++;
              } else {
                $s4 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c43);
                }
              }
              if ($s4 !== $this->peg_FAILED) {
                if (peg_regex_test($this->peg_c42, $this->input_substr($this->peg_currPos, 1))) {
                  $s5 = $this->input_substr($this->peg_currPos, 1);
                  $this->peg_currPos++;
                } else {
                  $s5 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) {
                      $this->peg_fail($this->peg_c43);
                  }
                }
                if ($s5 === $this->peg_FAILED) {
                  $s5 = null;
                }
                if ($s5 !== $this->peg_FAILED) {
                  if (peg_regex_test($this->peg_c42, $this->input_substr($this->peg_currPos, 1))) {
                    $s6 = $this->input_substr($this->peg_currPos, 1);
                    $this->peg_currPos++;
                  } else {
                    $s6 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c43);
                    }
                  }
                  if ($s6 === $this->peg_FAILED) {
                    $s6 = null;
                  }
                  if ($s6 !== $this->peg_FAILED) {
                    $s4 = array($s4, $s5, $s6);
                    $s3 = $s4;
                  } else {
                    $this->peg_currPos = $s3;
                    $s3 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s3;
                  $s3 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_FAILED;
              }
              if ($s3 !== $this->peg_FAILED) {
                $s2 = $this->input_substr($s2, $this->peg_currPos - $s2);
              } else {
                $s2 = $s3;
              }
              if ($s2 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f11($s2);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
            if ($s0 === $this->peg_FAILED) {
              $s0 = $this->peg_currPos;
              if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c44) {
                $s1 = $this->peg_c44;
                $this->peg_currPos += 2;
              } else {
                $s1 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c45);
                }
              }
              if ($s1 !== $this->peg_FAILED) {
                $s2 = $this->peg_currPos;
                $s3 = $this->peg_currPos;
                $s4 = $this->peg_parseHexDigit();
                if ($s4 !== $this->peg_FAILED) {
                  $s5 = $this->peg_parseHexDigit();
                  if ($s5 === $this->peg_FAILED) {
                    $s5 = null;
                  }
                  if ($s5 !== $this->peg_FAILED) {
                    $s4 = array($s4, $s5);
                    $s3 = $s4;
                  } else {
                    $this->peg_currPos = $s3;
                    $s3 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s3;
                  $s3 = $this->peg_FAILED;
                }
                if ($s3 !== $this->peg_FAILED) {
                  $s2 = $this->input_substr($s2, $this->peg_currPos - $s2);
                } else {
                  $s2 = $s3;
                }
                if ($s2 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s0;
                  $s1 = $this->peg_f12($s2);
                  $s0 = $s1;
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
              if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_currPos;
                if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c46) {
                  $s1 = $this->peg_c46;
                  $this->peg_currPos += 2;
                } else {
                  $s1 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) {
                      $this->peg_fail($this->peg_c47);
                  }
                }
                if ($s1 !== $this->peg_FAILED) {
                  $s2 = $this->peg_currPos;
                  $s3 = $this->peg_currPos;
                  $s4 = $this->peg_parseHexDigit();
                  if ($s4 !== $this->peg_FAILED) {
                    $s5 = $this->peg_parseHexDigit();
                    if ($s5 !== $this->peg_FAILED) {
                      $s6 = $this->peg_parseHexDigit();
                      if ($s6 !== $this->peg_FAILED) {
                        $s7 = $this->peg_parseHexDigit();
                        if ($s7 !== $this->peg_FAILED) {
                          $s4 = array($s4, $s5, $s6, $s7);
                          $s3 = $s4;
                        } else {
                          $this->peg_currPos = $s3;
                          $s3 = $this->peg_FAILED;
                        }
                      } else {
                        $this->peg_currPos = $s3;
                        $s3 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s3;
                      $s3 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s3;
                    $s3 = $this->peg_FAILED;
                  }
                  if ($s3 !== $this->peg_FAILED) {
                    $s2 = $this->input_substr($s2, $this->peg_currPos - $s2);
                  } else {
                    $s2 = $s3;
                  }
                  if ($s2 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s1 = $this->peg_f12($s2);
                    $s0 = $s1;
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
                if ($s0 === $this->peg_FAILED) {
                  if (peg_regex_test($this->peg_c48, $this->input_substr($this->peg_currPos, 1))) {
                    $s0 = $this->input_substr($this->peg_currPos, 1);
                    $this->peg_currPos++;
                  } else {
                    $s0 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c49);
                    }
                  }
                  if ($s0 === $this->peg_FAILED) {
                    if (peg_regex_test($this->peg_c50, $this->input_substr($this->peg_currPos, 1))) {
                      $s0 = $this->input_substr($this->peg_currPos, 1);
                      $this->peg_currPos++;
                    } else {
                      $s0 = $this->peg_FAILED;
                      if ($this->peg_silentFails === 0) {
                          $this->peg_fail($this->peg_c51);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return $s0;
    }

    private function peg_parseInt() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      $s2 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c52) {
        $s3 = $this->peg_c52;
        $this->peg_currPos++;
      } else {
        $s3 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c53);
        }
      }
      if ($s3 === $this->peg_FAILED) {
        $s3 = null;
      }
      if ($s3 !== $this->peg_FAILED) {
        $s4 = array();
        if (peg_regex_test($this->peg_c54, $this->input_substr($this->peg_currPos, 1))) {
          $s5 = $this->input_substr($this->peg_currPos, 1);
          $this->peg_currPos++;
        } else {
          $s5 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c55);
          }
        }
        if ($s5 !== $this->peg_FAILED) {
          while ($s5 !== $this->peg_FAILED) {
            $s4[] = $s5;
            if (peg_regex_test($this->peg_c54, $this->input_substr($this->peg_currPos, 1))) {
              $s5 = $this->input_substr($this->peg_currPos, 1);
              $this->peg_currPos++;
            } else {
              $s5 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c55);
              }
            }
          }
        } else {
          $s4 = $this->peg_FAILED;
        }
        if ($s4 !== $this->peg_FAILED) {
          $s3 = array($s3, $s4);
          $s2 = $s3;
        } else {
          $this->peg_currPos = $s2;
          $s2 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s2;
        $s2 = $this->peg_FAILED;
      }
      if ($s2 !== $this->peg_FAILED) {
        $s1 = $this->input_substr($s1, $this->peg_currPos - $s1);
      } else {
        $s1 = $s2;
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f13($s1);
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseIden() {

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      if (peg_regex_test($this->peg_c57, $this->input_substr($this->peg_currPos, 1))) {
        $s2 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s2 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c58);
        }
      }
      if ($s2 !== $this->peg_FAILED) {
        $s3 = array();
        if (peg_regex_test($this->peg_c59, $this->input_substr($this->peg_currPos, 1))) {
          $s4 = $this->input_substr($this->peg_currPos, 1);
          $this->peg_currPos++;
        } else {
          $s4 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c60);
          }
        }
        while ($s4 !== $this->peg_FAILED) {
          $s3[] = $s4;
          if (peg_regex_test($this->peg_c59, $this->input_substr($this->peg_currPos, 1))) {
            $s4 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s4 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c60);
            }
          }
        }
        if ($s3 !== $this->peg_FAILED) {
          $s2 = array($s2, $s3);
          $s1 = $s2;
        } else {
          $this->peg_currPos = $s1;
          $s1 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s1;
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s0 = $this->input_substr($s0, $this->peg_currPos - $s0);
      } else {
        $s0 = $s1;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c56);
        }
      }

      return $s0;
    }

    private function peg_parseHexDigit() {

      $this->peg_silentFails++;
      if (peg_regex_test($this->peg_c62, $this->input_substr($this->peg_currPos, 1))) {
        $s0 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c63);
        }
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c61);
        }
      }

      return $s0;
    }

    private function peg_parse_() {

      $this->peg_silentFails++;
      $s0 = array();
      if (peg_regex_test($this->peg_c65, $this->input_substr($this->peg_currPos, 1))) {
        $s1 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c66);
        }
      }
      while ($s1 !== $this->peg_FAILED) {
        $s0[] = $s1;
        if (peg_regex_test($this->peg_c65, $this->input_substr($this->peg_currPos, 1))) {
          $s1 = $this->input_substr($this->peg_currPos, 1);
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c66);
          }
        }
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c64);
        }
      }

      return $s0;
    }

  public function parse($input) {
    $arguments = func_get_args();
    $options = count($arguments) > 1 ? $arguments[1] : array();
    $this->cleanup_state();

    if (is_array($input)) {
        $this->input = $input;
    } else {
        preg_match_all("/./us", $input, $match);
        $this->input = $match[0];
    }
    $this->input_length = count($this->input);

    $old_regex_encoding = mb_regex_encoding();
    mb_regex_encoding("UTF-8");

    $this->peg_FAILED = new \stdClass;
    $this->peg_c0 = array("type" => "any", "description" => "any character" );
    $this->peg_c1 = "[[";
    $this->peg_c2 = array( "type" => "literal", "value" => "[[", "description" => "\"[[\"" );
    $this->peg_c3 = "]]";
    $this->peg_c4 = array( "type" => "literal", "value" => "]]", "description" => "\"]]\"" );
    $this->peg_c5 = "[<";
    $this->peg_c6 = array( "type" => "literal", "value" => "[<", "description" => "\"[<\"" );
    $this->peg_c7 = ">]";
    $this->peg_c8 = array( "type" => "literal", "value" => ">]", "description" => "\">]\"" );
    $this->peg_c9 = "[-";
    $this->peg_c10 = array( "type" => "literal", "value" => "[-", "description" => "\"[-\"" );
    $this->peg_c11 = "-]";
    $this->peg_c12 = array( "type" => "literal", "value" => "-]", "description" => "\"-]\"" );
    $this->peg_c13 = "{{";
    $this->peg_c14 = array( "type" => "literal", "value" => "{{", "description" => "\"{{\"" );
    $this->peg_c15 = "}}";
    $this->peg_c16 = array( "type" => "literal", "value" => "}}", "description" => "\"}}\"" );
    $this->peg_c17 = "{<";
    $this->peg_c18 = array( "type" => "literal", "value" => "{<", "description" => "\"{<\"" );
    $this->peg_c19 = ">}";
    $this->peg_c20 = array( "type" => "literal", "value" => ">}", "description" => "\">}\"" );
    $this->peg_c21 = "{?";
    $this->peg_c22 = array( "type" => "literal", "value" => "{?", "description" => "\"{?\"" );
    $this->peg_c23 = "?}";
    $this->peg_c24 = array( "type" => "literal", "value" => "?}", "description" => "\"?}\"" );
    $this->peg_c25 = "[";
    $this->peg_c26 = array( "type" => "literal", "value" => "[", "description" => "\"[\"" );
    $this->peg_c27 = "]";
    $this->peg_c28 = array( "type" => "literal", "value" => "]", "description" => "\"]\"" );
    $this->peg_c29 = array("type" => "other", "description" => "string" );
    $this->peg_c30 = "`";
    $this->peg_c31 = array( "type" => "literal", "value" => "`", "description" => "\"`\"" );
    $this->peg_c32 = "/^[^\\0-\\x1F\\\\`]/";
    $this->peg_c33 = array( "type" => "class", "value" => "[\x00-\x1F\\`]", "description" => "[\x00-\x1F\\`]" );
    $this->peg_c34 = "\\";
    $this->peg_c35 = array( "type" => "literal", "value" => "\\", "description" => "\"\\\\\"" );
    $this->peg_c36 = "/^[\\\\`]/";
    $this->peg_c37 = array( "type" => "class", "value" => "[\\`]", "description" => "[\\`]" );
    $this->peg_c38 = "/^[bfnrt]/";
    $this->peg_c39 = array( "type" => "class", "value" => "[bfnrt]", "description" => "[bfnrt]" );
    $this->peg_c40 = "\\0";
    $this->peg_c41 = array( "type" => "literal", "value" => "\\0", "description" => "\"\\\\0\"" );
    $this->peg_c42 = "/^[0-7]/";
    $this->peg_c43 = array( "type" => "class", "value" => "[0-7]", "description" => "[0-7]" );
    $this->peg_c44 = "\\x";
    $this->peg_c45 = array( "type" => "literal", "value" => "\\x", "description" => "\"\\\\x\"" );
    $this->peg_c46 = "\\u";
    $this->peg_c47 = array( "type" => "literal", "value" => "\\u", "description" => "\"\\\\u\"" );
    $this->peg_c48 = "/^[\\n]/";
    $this->peg_c49 = array( "type" => "class", "value" => "[\n]", "description" => "[\n]" );
    $this->peg_c50 = "/^[\\t]/";
    $this->peg_c51 = array( "type" => "class", "value" => "[\t]", "description" => "[\t]" );
    $this->peg_c52 = "-";
    $this->peg_c53 = array( "type" => "literal", "value" => "-", "description" => "\"-\"" );
    $this->peg_c54 = "/^[0-9]/";
    $this->peg_c55 = array( "type" => "class", "value" => "[0-9]", "description" => "[0-9]" );
    $this->peg_c56 = array("type" => "other", "description" => "Key" );
    $this->peg_c57 = "/^[_a-z\\\$]/i";
    $this->peg_c58 = array( "type" => "class", "value" => "[_a-z\$]", "description" => "[_a-z\$]" );
    $this->peg_c59 = "/^[0-9a-z\\\$_]/i";
    $this->peg_c60 = array( "type" => "class", "value" => "[0-9a-z\$_]", "description" => "[0-9a-z\$_]" );
    $this->peg_c61 = array("type" => "other", "description" => "hex-char" );
    $this->peg_c62 = "/^[0-9a-f]/i";
    $this->peg_c63 = array( "type" => "class", "value" => "[0-9a-f]", "description" => "[0-9a-f]" );
    $this->peg_c64 = array("type" => "other", "description" => "Whitespace" );
    $this->peg_c65 = "/^[ \\t\\n\\r]/";
    $this->peg_c66 = array( "type" => "class", "value" => "[ \t\n\r]", "description" => "[ \t\n\r]" );

    $peg_startRuleFunctions = array( 'Exp' => array($this, "peg_parseExp") );
    $peg_startRuleFunction  = array($this, "peg_parseExp");
    if (isset($options["startRule"])) {
      if (!(isset($peg_startRuleFunctions[$options["startRule"]]))) {
        throw new \Exception("Can't start parsing from rule \"" . $options["startRule"] . "\".");
      }

      $peg_startRuleFunction = $peg_startRuleFunctions[$options["startRule"]];
    }
    $peg_result = call_user_func($peg_startRuleFunction);

    mb_regex_encoding($old_regex_encoding);

    if ($peg_result !== $this->peg_FAILED && $this->peg_currPos === $this->input_length) {
      $this->cleanup_state(); // Free up memory
      return $peg_result;
    } else {
      if ($peg_result !== $this->peg_FAILED && $this->peg_currPos < $this->input_length) {
        $this->peg_fail(array("type" => "end", "description" => "end of input" ));
      }

      $exception = $this->peg_buildException(null, $this->peg_maxFailExpected, $this->peg_maxFailPos);
      $this->cleanup_state(); // Free up memory
      throw $exception;
    }
  }

};