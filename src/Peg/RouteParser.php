<?php
/*
 * Generated by peggy 1.0.0 with phpeggy plugin
 *
 * https://peggyjs.org/
 */

namespace KPS\Peg;

/* Useful functions: */

/* chr_unicode - get unicode character from its char code */
if (!function_exists("KPS\\Peg\\chr_unicode")) {
    function chr_unicode($code) {
        return html_entity_decode("&#$code;", ENT_QUOTES, "UTF-8");
    }
}
/* ord_unicode - get unicode char code from string */
if (!function_exists("KPS\\Peg\\ord_unicode")) {
    function ord_unicode($character) {
        if (strlen($character) === 1) {
            return ord($character);
        }
        $json = json_encode($character);
        $utf16_1 = hexdec(substr($json, 3, 4));
        if (substr($json, 7, 2) === "\u") {
            $utf16_2 = hexdec(substr($json, 9, 4));
            return 0x10000 + (($utf16_1 & 0x3ff) << 10) + ($utf16_2 & 0x3ff);
        } else {
            return $utf16_1;
        }
    }
}
/* peg_regex_test - multibyte regex test */
if (!function_exists("KPS\\Peg\\peg_regex_test")) {
    function peg_regex_test($pattern, $string) {
        if (substr($pattern, -1) == "i") {
            return mb_eregi(substr($pattern, 1, -2), $string);
        } else {
            return mb_ereg(substr($pattern, 1, -1), $string);
        }
    }
}

/* Syntax error exception */
if (!class_exists("KPS\\Peg\\SyntaxError", false)) {
    class SyntaxError extends \Exception {
        public $expected;
        public $found;
        public $grammarOffset;
        public $grammarLine;
        public $grammarColumn;
        public $name;
        public function __construct($message, $expected, $found, $offset, $line, $column) {
            parent::__construct($message, 0);
            $this->expected = $expected;
            $this->found = $found;
            $this->grammarOffset = $offset;
            $this->grammarLine = $line;
            $this->grammarColumn = $column;
            $this->name = "SyntaxError";
        }
    }
}

class RouteParser {
    private $peg_currPos          = 0;
    private $peg_reportedPos      = 0;
    private $peg_cachedPos        = 0;
    private $peg_cachedPosDetails = array('line' => 1, 'column' => 1, 'seenCR' => false );
    private $peg_maxFailPos       = 0;
    private $peg_maxFailExpected  = array();
    private $peg_silentFails      = 0;
    private $input                = array();
    private $input_length         = 0;

    private function cleanup_state() {
      $this->peg_currPos          = 0;
      $this->peg_reportedPos      = 0;
      $this->peg_cachedPos        = 0;
      $this->peg_cachedPosDetails = array('line' => 1, 'column' => 1, 'seenCR' => false );
      $this->peg_maxFailPos       = 0;
      $this->peg_maxFailExpected  = array();
      $this->peg_silentFails      = 0;
      $this->input                = array();
      $this->input_length         = 0;

    }

    private function input_substr($start, $length) {
      if ($length === 1 && $start < $this->input_length) {
        return $this->input[$start];
      }
      $substr = '';
      $max = min($start + $length, $this->input_length);
      for ($i = $start; $i < $max; $i++) {
        $substr .= $this->input[$i];
      }
      return $substr;
    }


    private function text() {
      return $this->input_substr($this->peg_reportedPos, $this->peg_currPos - $this->peg_reportedPos);
    }

    private function offset() {
      return $this->peg_reportedPos;
    }

    private function line() {
      $compute_pd = $this->peg_computePosDetails($this->peg_reportedPos);
      return $compute_pd["line"];
    }

    private function column() {
      $compute_pd = $this->peg_computePosDetails($this->peg_reportedPos);
      return $compute_pd["column"];
    }

    private function expected($description) {
      throw $this->peg_buildException(
        null,
        array(array("type" => "other", "description" => $description )),
        $this->peg_reportedPos
      );
    }

    private function error($message) {
      throw $this->peg_buildException($message, null, $this->peg_reportedPos);
    }

    private function peg_advancePos(&$details, $startPos, $endPos) {
      for ($p = $startPos; $p < $endPos; $p++) {
        $ch = $this->input_substr($p, 1);
        if ($ch === "\n") {
          if (!$details["seenCR"]) { $details["line"]++; }
          $details["column"] = 1;
          $details["seenCR"] = false;
        } else if ($ch === "\r" || $ch === "\u2028" || $ch === "\u2029") {
          $details["line"]++;
          $details["column"] = 1;
          $details["seenCR"] = true;
        } else {
          $details["column"]++;
          $details["seenCR"] = false;
        }
      }
    }

    private function peg_computePosDetails($pos) {
      if ($this->peg_cachedPos !== $pos) {
        if ($this->peg_cachedPos > $pos) {
          $this->peg_cachedPos = 0;
          $this->peg_cachedPosDetails = array( "line" => 1, "column" => 1, "seenCR" => false );
        }
        $this->peg_advancePos($this->peg_cachedPosDetails, $this->peg_cachedPos, $pos);
        $this->peg_cachedPos = $pos;
      }

      return $this->peg_cachedPosDetails;
    }

    private function peg_fail($expected) {
      if ($this->peg_currPos < $this->peg_maxFailPos) { return; }

      if ($this->peg_currPos > $this->peg_maxFailPos) {
        $this->peg_maxFailPos = $this->peg_currPos;
        $this->peg_maxFailExpected = array();
      }

      $this->peg_maxFailExpected[] = $expected;
    }

    private function peg_buildException_expectedComparator($a, $b) {
      if ($a["description"] < $b["description"]) {
        return -1;
      } else if ($a["description"] > $b["description"]) {
        return 1;
      } else {
        return 0;
      }
    }

    private function peg_buildException($message, $expected, $pos) {
      $posDetails = $this->peg_computePosDetails($pos);
      $found      = $pos < $this->input_length ? $this->input[$pos] : null;

      if ($expected !== null) {
        usort($expected, array($this, "peg_buildException_expectedComparator"));
        $i = 1;
        while ($i < count($expected)) {
          if ($expected[$i - 1] === $expected[$i]) {
            array_splice($expected, $i, 1);
          } else {
            $i++;
          }
        }
      }

      if ($message === null) {
        $expectedDescs = array_fill(0, count($expected), null);

        for ($i = 0; $i < count($expected); $i++) {
          $expectedDescs[$i] = $expected[$i]["description"];
        }

        $expectedDesc = count($expected) > 1
          ? join(", ", array_slice($expectedDescs, 0, -1))
              . " or "
              . $expectedDescs[count($expected) - 1]
          : $expectedDescs[0];

        $foundDesc = $found ? json_encode($found) : "end of input";

        $message = "Expected " . $expectedDesc . " but " . $foundDesc . " found.";
      }

      return new SyntaxError(
        $message,
        $expected,
        $found,
        $pos,
        $posDetails["line"],
        $posDetails["column"]
      );
    }

    private $peg_FAILED;
    private $peg_c0;
    private $peg_c1;
    private $peg_c2;
    private $peg_c3;
    private $peg_c4;
    private $peg_c5;
    private $peg_c6;
    private $peg_c7;
    private $peg_c8;
    private $peg_c9;
    private $peg_c10;
    private $peg_c11;
    private $peg_c12;
    private $peg_c13;
    private $peg_c14;
    private $peg_c15;
    private $peg_c16;
    private $peg_c17;
    private $peg_c18;
    private $peg_c19;
    private $peg_c20;
    private $peg_c21;
    private $peg_c22;
    private $peg_c23;
    private $peg_c24;
    private $peg_c25;
    private $peg_c26;
    private $peg_c27;
    private $peg_c28;
    private $peg_c29;
    private $peg_c30;
    private $peg_c31;
    private $peg_c32;
    private $peg_c33;
    private $peg_c34;
    private $peg_c35;
    private $peg_c36;
    private $peg_c37;
    private $peg_c38;
    private $peg_c39;
    private $peg_c40;
    private $peg_c41;
    private $peg_c42;
    private $peg_c43;
    private $peg_c44;
    private $peg_c45;
    private $peg_c46;
    private $peg_c47;
    private $peg_c48;
    private $peg_c49;
    private $peg_c50;
    private $peg_c51;
    private $peg_c52;
    private $peg_c53;
    private $peg_c54;
    private $peg_c55;
    private $peg_c56;
    private $peg_c57;
    private $peg_c58;
    private $peg_c59;
    private $peg_c60;

    private function peg_f0($r) { return $r; }
    private function peg_f1($r) { return ['import' => $r]; }
    private function peg_f2($v, $n) { return $n; }
    private function peg_f3($v, $n) {
    			$ret = [ 'view' => $v ];
    			if($n !== null) { $ret['nxt'] = $n; }
    			return $ret;
    			}
    private function peg_f4($h, $n) { return $n; }
    private function peg_f5($h, $t) { return [$h, ...$t]; }
    private function peg_f6($m, $r) { return [...$m, ...$r];  }
    private function peg_f7($m) { return Helper::makeMatchResult([$m]); }
    private function peg_f8($h, $m) { return $m; }
    private function peg_f9($h, $t) { return Helper::makeMatchResult([$h, ...$t]); }
    private function peg_f10($i) { return $i; }
    private function peg_f11($h, $s) { return $s; }
    private function peg_f12($h, $t) { return [$h, ...$t];  }
    private function peg_f13($s) { return $s; }
    private function peg_f14() { return false; }

    private function peg_parseExp() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parse_();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseRoute();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parse_();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f0($s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseRoute() {

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c0) {
        $s1 = $this->peg_c0;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c1);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseSTR();
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f1($s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parseSTR();
        if ($s1 === $this->peg_FAILED) {
          $s1 = $this->peg_parseNONE();
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_currPos;
          $s3 = $this->peg_parseARROW();
          if ($s3 !== $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c2) {
              $s4 = $this->peg_c2;
              $this->peg_currPos++;
            } else {
              $s4 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c3);
              }
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parse_();
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parseNext();
                if ($s6 !== $this->peg_FAILED) {
                  $s7 = $this->peg_parse_();
                  if ($s7 !== $this->peg_FAILED) {
                    if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c4) {
                      $s8 = $this->peg_c4;
                      $this->peg_currPos++;
                    } else {
                      $s8 = $this->peg_FAILED;
                      if ($this->peg_silentFails === 0) {
                          $this->peg_fail($this->peg_c5);
                      }
                    }
                    if ($s8 !== $this->peg_FAILED) {
                      $this->peg_reportedPos = $s2;
                      $s3 = $this->peg_f2($s1, $s6);
                      $s2 = $s3;
                    } else {
                      $this->peg_currPos = $s2;
                      $s2 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s2;
                    $s2 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s2;
                  $s2 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s2;
                $s2 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s2;
              $s2 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_FAILED;
          }
          if ($s2 === $this->peg_FAILED) {
            $s2 = null;
          }
          if ($s2 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f3($s1, $s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      }

      return $s0;
    }

    private function peg_parseNext() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseNextItem();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_parseCOMMA();
        if ($s4 !== $this->peg_FAILED) {
          $s5 = $this->peg_parseNextItem();
          if ($s5 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s3;
            $s4 = $this->peg_f4($s1, $s5);
            $s3 = $s4;
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_FAILED;
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_parseCOMMA();
          if ($s4 !== $this->peg_FAILED) {
            $s5 = $this->peg_parseNextItem();
            if ($s5 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s3;
              $s4 = $this->peg_f4($s1, $s5);
              $s3 = $s4;
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseCOMMA();
          if ($s3 === $this->peg_FAILED) {
            $s3 = null;
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f5($s1, $s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseNextItem() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseMatches();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseCOLON();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseRoute();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f6($s1, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseMatches() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseMatch();
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f7($s1);
      }
      $s0 = $s1;
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c6) {
          $s1 = $this->peg_c6;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c7);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_parse_();
          if ($s2 !== $this->peg_FAILED) {
            $s3 = $this->peg_parseMatch();
            if ($s3 !== $this->peg_FAILED) {
              $s4 = array();
              $s5 = $this->peg_currPos;
              $s6 = $this->peg_parseCOMMA();
              if ($s6 !== $this->peg_FAILED) {
                $s7 = $this->peg_parseMatch();
                if ($s7 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s5;
                  $s6 = $this->peg_f8($s3, $s7);
                  $s5 = $s6;
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_FAILED;
              }
              while ($s5 !== $this->peg_FAILED) {
                $s4[] = $s5;
                $s5 = $this->peg_currPos;
                $s6 = $this->peg_parseCOMMA();
                if ($s6 !== $this->peg_FAILED) {
                  $s7 = $this->peg_parseMatch();
                  if ($s7 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s5;
                    $s6 = $this->peg_f8($s3, $s7);
                    $s5 = $s6;
                  } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_FAILED;
                }
              }
              if ($s4 !== $this->peg_FAILED) {
                $s5 = $this->peg_parseCOMMA();
                if ($s5 === $this->peg_FAILED) {
                  $s5 = null;
                }
                if ($s5 !== $this->peg_FAILED) {
                  $s6 = $this->peg_parse_();
                  if ($s6 !== $this->peg_FAILED) {
                    if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c8) {
                      $s7 = $this->peg_c8;
                      $this->peg_currPos++;
                    } else {
                      $s7 = $this->peg_FAILED;
                      if ($this->peg_silentFails === 0) {
                          $this->peg_fail($this->peg_c9);
                      }
                    }
                    if ($s7 !== $this->peg_FAILED) {
                      $this->peg_reportedPos = $s0;
                      $s1 = $this->peg_f9($s3, $s4);
                      $s0 = $s1;
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      }

      return $s0;
    }

    private function peg_parseMatch() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c10) {
        $s2 = $this->peg_c10;
        $this->peg_currPos++;
      } else {
        $s2 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c11);
        }
      }
      if ($s2 !== $this->peg_FAILED) {
        $s3 = $this->peg_parseIDEN();
        if ($s3 !== $this->peg_FAILED) {
          $s4 = $this->peg_parseEQ();
          if ($s4 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s1;
            $s2 = $this->peg_f10($s3);
            $s1 = $s2;
          } else {
            $this->peg_currPos = $s1;
            $s1 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s1;
          $s1 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s1;
        $s1 = $this->peg_FAILED;
      }
      if ($s1 === $this->peg_FAILED) {
        $s1 = null;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseMatchStr();
        if ($s2 !== $this->peg_FAILED) {
          $s1 = array($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseMatchStr() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseSTR();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_parseOR();
        if ($s4 !== $this->peg_FAILED) {
          $s5 = $this->peg_parseSTR();
          if ($s5 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s3;
            $s4 = $this->peg_f11($s1, $s5);
            $s3 = $s4;
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s3;
          $s3 = $this->peg_FAILED;
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_parseOR();
          if ($s4 !== $this->peg_FAILED) {
            $s5 = $this->peg_parseSTR();
            if ($s5 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s3;
              $s4 = $this->peg_f11($s1, $s5);
              $s3 = $s4;
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f5($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c12) {
          $s1 = $this->peg_c12;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c13);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_parse_();
          if ($s2 !== $this->peg_FAILED) {
            $s3 = $this->peg_parseSTR();
            if ($s3 !== $this->peg_FAILED) {
              $s4 = array();
              $s5 = $this->peg_currPos;
              $s6 = $this->peg_parseOR();
              if ($s6 !== $this->peg_FAILED) {
                $s7 = $this->peg_parseSTR();
                if ($s7 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s5;
                  $s6 = $this->peg_f11($s3, $s7);
                  $s5 = $s6;
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_FAILED;
              }
              while ($s5 !== $this->peg_FAILED) {
                $s4[] = $s5;
                $s5 = $this->peg_currPos;
                $s6 = $this->peg_parseOR();
                if ($s6 !== $this->peg_FAILED) {
                  $s7 = $this->peg_parseSTR();
                  if ($s7 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s5;
                    $s6 = $this->peg_f11($s3, $s7);
                    $s5 = $s6;
                  } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s5;
                  $s5 = $this->peg_FAILED;
                }
              }
              if ($s4 !== $this->peg_FAILED) {
                $s5 = $this->peg_parse_();
                if ($s5 !== $this->peg_FAILED) {
                  if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c14) {
                    $s6 = $this->peg_c14;
                    $this->peg_currPos++;
                  } else {
                    $s6 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c15);
                    }
                  }
                  if ($s6 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s1 = $this->peg_f12($s3, $s4);
                    $s0 = $s1;
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      }

      return $s0;
    }

    private function peg_parseSTR() {

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c16) {
        $s1 = $this->peg_c16;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c17);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_currPos;
        $s3 = array();
        if (peg_regex_test($this->peg_c18, $this->input_substr($this->peg_currPos, 1))) {
          $s4 = $this->input_substr($this->peg_currPos, 1);
          $this->peg_currPos++;
        } else {
          $s4 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c19);
          }
        }
        while ($s4 !== $this->peg_FAILED) {
          $s3[] = $s4;
          if (peg_regex_test($this->peg_c18, $this->input_substr($this->peg_currPos, 1))) {
            $s4 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s4 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c19);
            }
          }
        }
        if ($s3 !== $this->peg_FAILED) {
          $s2 = $this->input_substr($s2, $this->peg_currPos - $s2);
        } else {
          $s2 = $s3;
        }
        if ($s2 !== $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c16) {
            $s3 = $this->peg_c16;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c17);
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f13($s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseIDEN() {

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      if (peg_regex_test($this->peg_c21, $this->input_substr($this->peg_currPos, 1))) {
        $s2 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s2 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c22);
        }
      }
      if ($s2 !== $this->peg_FAILED) {
        $s3 = array();
        if (peg_regex_test($this->peg_c23, $this->input_substr($this->peg_currPos, 1))) {
          $s4 = $this->input_substr($this->peg_currPos, 1);
          $this->peg_currPos++;
        } else {
          $s4 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c24);
          }
        }
        while ($s4 !== $this->peg_FAILED) {
          $s3[] = $s4;
          if (peg_regex_test($this->peg_c23, $this->input_substr($this->peg_currPos, 1))) {
            $s4 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s4 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c24);
            }
          }
        }
        if ($s3 !== $this->peg_FAILED) {
          $s2 = array($s2, $s3);
          $s1 = $s2;
        } else {
          $this->peg_currPos = $s1;
          $s1 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s1;
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s0 = $this->input_substr($s0, $this->peg_currPos - $s0);
      } else {
        $s0 = $s1;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c20);
        }
      }

      return $s0;
    }

    private function peg_parseNONE() {

      $s0 = $this->peg_currPos;
      if (mb_strtolower($this->input_substr($this->peg_currPos, 4), "UTF-8") === $this->peg_c25) {
        $s1 = $this->input_substr($this->peg_currPos, 4);
        $this->peg_currPos += 4;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c26);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f14();
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseARROW() {

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parse_();
      if ($s1 !== $this->peg_FAILED) {
        if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c28) {
          $s2 = $this->peg_c28;
          $this->peg_currPos += 2;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c29);
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parse_();
          if ($s3 !== $this->peg_FAILED) {
            $s1 = array($s1, $s2, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c27);
        }
      }

      return $s0;
    }

    private function peg_parseCOLON() {

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parse_();
      if ($s1 !== $this->peg_FAILED) {
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c31) {
          $s2 = $this->peg_c31;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c32);
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parse_();
          if ($s3 !== $this->peg_FAILED) {
            $s1 = array($s1, $s2, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c30);
        }
      }

      return $s0;
    }

    private function peg_parseCOMMA() {

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parse_();
      if ($s1 !== $this->peg_FAILED) {
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c34) {
          $s2 = $this->peg_c34;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c35);
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parse_();
          if ($s3 !== $this->peg_FAILED) {
            $s1 = array($s1, $s2, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c33);
        }
      }

      return $s0;
    }

    private function peg_parseEQ() {

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parse_();
      if ($s1 !== $this->peg_FAILED) {
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c37) {
          $s2 = $this->peg_c37;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c38);
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parse_();
          if ($s3 !== $this->peg_FAILED) {
            $s1 = array($s1, $s2, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c36);
        }
      }

      return $s0;
    }

    private function peg_parseOR() {

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parse_();
      if ($s1 !== $this->peg_FAILED) {
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c40) {
          $s2 = $this->peg_c40;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c41);
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parse_();
          if ($s3 !== $this->peg_FAILED) {
            $s1 = array($s1, $s2, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c39);
        }
      }

      return $s0;
    }

    private function peg_parse_() {

      $this->peg_silentFails++;
      $s0 = array();
      if (peg_regex_test($this->peg_c43, $this->input_substr($this->peg_currPos, 1))) {
        $s1 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c44);
        }
      }
      if ($s1 === $this->peg_FAILED) {
        $s1 = $this->peg_parseComment();
      }
      while ($s1 !== $this->peg_FAILED) {
        $s0[] = $s1;
        if (peg_regex_test($this->peg_c43, $this->input_substr($this->peg_currPos, 1))) {
          $s1 = $this->input_substr($this->peg_currPos, 1);
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c44);
          }
        }
        if ($s1 === $this->peg_FAILED) {
          $s1 = $this->peg_parseComment();
        }
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c42);
        }
      }

      return $s0;
    }

    private function peg_parseComment() {

      $this->peg_silentFails++;
      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c46) {
        $s1 = $this->peg_c46;
        $this->peg_currPos += 2;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c47);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        if (peg_regex_test($this->peg_c48, $this->input_substr($this->peg_currPos, 1))) {
          $s3 = $this->input_substr($this->peg_currPos, 1);
          $this->peg_currPos++;
        } else {
          $s3 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c49);
          }
        }
        if ($s3 === $this->peg_FAILED) {
          $s3 = $this->peg_currPos;
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c50) {
            $s4 = $this->peg_c50;
            $this->peg_currPos++;
          } else {
            $s4 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c51);
            }
          }
          if ($s4 !== $this->peg_FAILED) {
            $s5 = $this->peg_currPos;
            $this->peg_silentFails++;
            if (peg_regex_test($this->peg_c52, $this->input_substr($this->peg_currPos, 1))) {
              $s6 = $this->input_substr($this->peg_currPos, 1);
              $this->peg_currPos++;
            } else {
              $s6 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c53);
              }
            }
            $this->peg_silentFails--;
            if ($s6 === $this->peg_FAILED) {
              $s5 = null;
            } else {
              $this->peg_currPos = $s5;
              $s5 = $this->peg_FAILED;
            }
            if ($s5 !== $this->peg_FAILED) {
              $s4 = array($s4, $s5);
              $s3 = $s4;
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
          }
        }
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          if (peg_regex_test($this->peg_c48, $this->input_substr($this->peg_currPos, 1))) {
            $s3 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c49);
            }
          }
          if ($s3 === $this->peg_FAILED) {
            $s3 = $this->peg_currPos;
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c50) {
              $s4 = $this->peg_c50;
              $this->peg_currPos++;
            } else {
              $s4 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c51);
              }
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_currPos;
              $this->peg_silentFails++;
              if (peg_regex_test($this->peg_c52, $this->input_substr($this->peg_currPos, 1))) {
                $s6 = $this->input_substr($this->peg_currPos, 1);
                $this->peg_currPos++;
              } else {
                $s6 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c53);
                }
              }
              $this->peg_silentFails--;
              if ($s6 === $this->peg_FAILED) {
                $s5 = null;
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_FAILED;
              }
              if ($s5 !== $this->peg_FAILED) {
                $s4 = array($s4, $s5);
                $s3 = $s4;
              } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_FAILED;
            }
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c54) {
            $s3 = $this->peg_c54;
            $this->peg_currPos += 2;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c55);
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $s1 = array($s1, $s2, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c56) {
          $s1 = $this->peg_c56;
          $this->peg_currPos += 2;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c57);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = array();
          if (peg_regex_test($this->peg_c58, $this->input_substr($this->peg_currPos, 1))) {
            $s3 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c59);
            }
          }
          while ($s3 !== $this->peg_FAILED) {
            $s2[] = $s3;
            if (peg_regex_test($this->peg_c58, $this->input_substr($this->peg_currPos, 1))) {
              $s3 = $this->input_substr($this->peg_currPos, 1);
              $this->peg_currPos++;
            } else {
              $s3 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c59);
              }
            }
          }
          if ($s2 !== $this->peg_FAILED) {
            if (peg_regex_test($this->peg_c60, $this->input_substr($this->peg_currPos, 1))) {
              $s3 = $this->input_substr($this->peg_currPos, 1);
              $this->peg_currPos++;
            } else {
              $s3 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c59);
              }
            }
            if ($s3 === $this->peg_FAILED) {
              $s3 = null;
            }
            if ($s3 !== $this->peg_FAILED) {
              $s1 = array($s1, $s2, $s3);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c45);
        }
      }

      return $s0;
    }

  public function parse($input) {
    $arguments = func_get_args();
    $options = count($arguments) > 1 ? $arguments[1] : array();
    $this->cleanup_state();

    if (is_array($input)) {
        $this->input = $input;
    } else {
        preg_match_all("/./us", $input, $match);
        $this->input = $match[0];
    }
    $this->input_length = count($this->input);

    $old_regex_encoding = mb_regex_encoding();
    mb_regex_encoding("UTF-8");

    $this->peg_FAILED = new \stdClass;
    $this->peg_c0 = "@";
    $this->peg_c1 = array( "type" => "literal", "value" => "@", "description" => "\"@\"" );
    $this->peg_c2 = "{";
    $this->peg_c3 = array( "type" => "literal", "value" => "{", "description" => "\"{\"" );
    $this->peg_c4 = "}";
    $this->peg_c5 = array( "type" => "literal", "value" => "}", "description" => "\"}\"" );
    $this->peg_c6 = "[";
    $this->peg_c7 = array( "type" => "literal", "value" => "[", "description" => "\"[\"" );
    $this->peg_c8 = "]";
    $this->peg_c9 = array( "type" => "literal", "value" => "]", "description" => "\"]\"" );
    $this->peg_c10 = "$";
    $this->peg_c11 = array( "type" => "literal", "value" => "$", "description" => "\"$\"" );
    $this->peg_c12 = "(";
    $this->peg_c13 = array( "type" => "literal", "value" => "(", "description" => "\"(\"" );
    $this->peg_c14 = ")";
    $this->peg_c15 = array( "type" => "literal", "value" => ")", "description" => "\")\"" );
    $this->peg_c16 = "`";
    $this->peg_c17 = array( "type" => "literal", "value" => "`", "description" => "\"`\"" );
    $this->peg_c18 = "/^[^`]/";
    $this->peg_c19 = array( "type" => "class", "value" => "[`]", "description" => "[`]" );
    $this->peg_c20 = array("type" => "other", "description" => "VarName" );
    $this->peg_c21 = "/^[a-z_]/i";
    $this->peg_c22 = array( "type" => "class", "value" => "[a-z_]", "description" => "[a-z_]" );
    $this->peg_c23 = "/^[a-z0-9_]/i";
    $this->peg_c24 = array( "type" => "class", "value" => "[a-z0-9_]", "description" => "[a-z0-9_]" );
    $this->peg_c25 = "none";
    $this->peg_c26 = array( "type" => "literal", "value" => "none", "description" => "\"none\"" );
    $this->peg_c27 = array("type" => "other", "description" => "->" );
    $this->peg_c28 = "->";
    $this->peg_c29 = array( "type" => "literal", "value" => "->", "description" => "\"->\"" );
    $this->peg_c30 = array("type" => "other", "description" => ":" );
    $this->peg_c31 = ":";
    $this->peg_c32 = array( "type" => "literal", "value" => ":", "description" => "\":\"" );
    $this->peg_c33 = array("type" => "other", "description" => "," );
    $this->peg_c34 = ",";
    $this->peg_c35 = array( "type" => "literal", "value" => ",", "description" => "\",\"" );
    $this->peg_c36 = array("type" => "other", "description" => "=" );
    $this->peg_c37 = "=";
    $this->peg_c38 = array( "type" => "literal", "value" => "=", "description" => "\"=\"" );
    $this->peg_c39 = array("type" => "other", "description" => "|" );
    $this->peg_c40 = "|";
    $this->peg_c41 = array( "type" => "literal", "value" => "|", "description" => "\"|\"" );
    $this->peg_c42 = array("type" => "other", "description" => "whitespace" );
    $this->peg_c43 = "/^[ \\t\\n\\r]/";
    $this->peg_c44 = array( "type" => "class", "value" => "[ \t\n\r]", "description" => "[ \t\n\r]" );
    $this->peg_c45 = array("type" => "other", "description" => "Comment" );
    $this->peg_c46 = "/*";
    $this->peg_c47 = array( "type" => "literal", "value" => "/*", "description" => "\"/*\"" );
    $this->peg_c48 = "/^[^*]/";
    $this->peg_c49 = array( "type" => "class", "value" => "[*]", "description" => "[*]" );
    $this->peg_c50 = "*";
    $this->peg_c51 = array( "type" => "literal", "value" => "*", "description" => "\"*\"" );
    $this->peg_c52 = "/^[\\/]/";
    $this->peg_c53 = array( "type" => "class", "value" => "[/]", "description" => "[/]" );
    $this->peg_c54 = "*/";
    $this->peg_c55 = array( "type" => "literal", "value" => "*/", "description" => "\"*/\"" );
    $this->peg_c56 = "//";
    $this->peg_c57 = array( "type" => "literal", "value" => "//", "description" => "\"//\"" );
    $this->peg_c58 = "/^[^\\n]/";
    $this->peg_c59 = array( "type" => "class", "value" => "[\n]", "description" => "[\n]" );
    $this->peg_c60 = "/^[\\n]/";

    $peg_startRuleFunctions = array( 'Exp' => array($this, "peg_parseExp") );
    $peg_startRuleFunction  = array($this, "peg_parseExp");
    if (isset($options["startRule"])) {
      if (!(isset($peg_startRuleFunctions[$options["startRule"]]))) {
        throw new \Exception("Can't start parsing from rule \"" . $options["startRule"] . "\".");
      }

      $peg_startRuleFunction = $peg_startRuleFunctions[$options["startRule"]];
    }

    /* BEGIN initializer code */
     
    /* END initializer code */

    $peg_result = call_user_func($peg_startRuleFunction);

    mb_regex_encoding($old_regex_encoding);

    if ($peg_result !== $this->peg_FAILED && $this->peg_currPos === $this->input_length) {
      $this->cleanup_state(); // Free up memory
      return $peg_result;
    } else {
      if ($peg_result !== $this->peg_FAILED && $this->peg_currPos < $this->input_length) {
        $this->peg_fail(array("type" => "end", "description" => "end of input" ));
      }

      $exception = $this->peg_buildException(null, $this->peg_maxFailExpected, $this->peg_maxFailPos);
      $this->cleanup_state(); // Free up memory
      throw $exception;
    }
  }

};